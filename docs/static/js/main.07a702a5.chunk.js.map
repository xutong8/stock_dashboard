{"version":3,"sources":["apis/stock.js","components/SearchCard.js","components/FilterCard.js","components/TableDataCard.js","components/GraphCard.js","components/App.js","index.js"],"names":["axios","create","baseURL","SearchCard","state","search_stockArray","loading_api","sendSearchResult","torf","value","a","stockValue","document","querySelector","toUpperCase","startDate","Math","round","Date","getTime","endDate","checkForExist","includes","alert","stock","get","params","symbol","token","table_response","setState","resolution","from","to","graph_response","concat","data","c","h","l","o","pc","t","props","sendSearchGraphResult","response","validateBtn","val","btnDOM","length","disabled","localStorage","getItem","lsArray","JSON","parse","window","confirm","i","this","removeItem","className","type","placeholder","onKeyUp","e","target","onClick","React","Component","FilterCard","validator_start_date","validator_end_date","start_dateValidator","current_date","end_dateValidator","filterMyChart","getFilteredData","showFilterDOM","optionSelectDOM","showGraphData","map","graphData","index","key","selected","onChange","TableDataCard","currency","tableDataDOM","tableData","table","scope","stringify","split","replace","toFixed","showTableData","GraphCard","chartRef","createRef","convertToDate","str","date","mnth","getMonth","slice","day","getDate","getFullYear","join","lowOrHighColor","y_axis","myChartRef","current","getContext","Chart","labels","x_axis","datasets","backgroundColor","borderColor","options","responsive","tooltips","enabled","mode","xAxes","ticks","display","gridLines","color","yAxes","stepSize","point","radius","id","date_data","filteredStartDate","filteredEndDate","ref","App","activeStockValue","showFilterData","option","response_data","abc","converted_array","obj","indexOf","push","splice","codeExist","graph_array","setItem","s","location","reload","checkStockCode","style","graphCardDOM","showActiveStockCode","filteredData","ReactDOM","render"],"mappings":"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","file":"static/js/main.07a702a5.chunk.js","sourcesContent":["import axios from 'axios';\n\n\n// API拉取 \nexport default axios.create({ baseURL: 'https://finnhub.io/api/v1/' });","import React from 'react';\nimport stock from '../apis/stock';\nimport '../css/SearchCard.css';\nimport '../css/styles.css';\nimport { FaSearch } from 'react-icons/fa'\n\nclass SearchCard extends React.Component{\n\n    state = {\n        search_stockArray: [],\n        loading_api: false\n    };\n\n    // @desc: componentDidMount disables the button search when page loads.\n    componentDidMount(){\n        document.querySelector(\".btn-search\").disabled = true;\n\n        if(localStorage.getItem(\"historyStockArray\") !== null){\n            let lsArray = JSON.parse(localStorage.getItem(\"historyStockArray\"));\n            if(window.confirm(\"You have saved stocks. Would you like to load them?\")){\n                for(var i = 0; i < lsArray.length; i++){\n                    this.sendSearchResult(false, lsArray[i])\n                }\n            }else{\n                localStorage.removeItem(\"historyStockArray\");\n            };\n        };\n    };\n\n    // @desc: componentDidUpdate checks for the value of button and removes\n    //        the disabled state.\n    componentDidUpdate(){\n        if(document.querySelector(\".btn-search\").value === ''){\n            document.querySelector(\".btn-search\").disabled = true;\n        }\n    }\n\n    // @desc: when the button is pressed, this runs the API call which checks\n    //        for the user's input of the stock code and gets the latest value\n    //        by looking at it's current date and 24 hours of endDate. This calls\n    //        the tableData and graphData and sends it back up to App.js as props.\n    //        It also makes the input null, and also checks if the stock code exists\n    //        within the API.\n    sendSearchResult = async (torf, value) => {\n        let stockValue;\n        if(torf){\n            stockValue = document.querySelector(\".stock-code__value\").value.toUpperCase();\n        }else{\n            stockValue = value;\n        }\n\n        let startDate = Math.round(new Date().getTime() / 1000);\n        let endDate = startDate - (72 * 3600);\n        let checkForExist = false;\n\n        // Prevents duplicates\n        if(this.state.search_stockArray.includes(stockValue)){\n            alert(\"Already exists\");\n            document.querySelector(\".stock-code__value\").value = '';\n        }else{\n            checkForExist = true;\n        }\n\n        const table_response = await stock.get('/quote', {\n            params: {\n              symbol: stockValue,\n              token: 'bqhq9i7rh5rbubolrqd0'\n            }\n        });\n\n        if(table_response){\n            this.setState({ loading_api: true });\n        }\n\n        const graph_response = await stock.get('/stock/candle', {\n            params: {\n              symbol: stockValue,\n              resolution: 5,\n              from: endDate,\n              to: startDate,\n              token: 'bqhq9i7rh5rbubolrqd0'\n            }\n        });\n        \n        this.setState({\n            search_stockArray: this.state.search_stockArray.concat(stockValue),\n        }, () => {\n            if(checkForExist){\n                if(table_response.data.c == 0 && table_response.data.h == 0 && table_response.data.l == 0 && table_response.data.o == 0 && table_response.data.pc == 0 && table_response.data.t == 0){\n                    this.props.sendSearchGraphResult(\"no_data\", '');\n                }else{\n                    this.props.sendSearchGraphResult(true, {stockValue: stockValue, response: graph_response.data});\n                    this.props.sendSearchResult(table_response.data);\n                    this.setState({ loading_api: false });\n                }\n                document.querySelector(\".stock-code__value\").value = '';\n            };\n        });\n    };\n\n    // @desc: validateBtn checks for the onKeyUp change of the input and disables\n    //        or removes the disable of the button.\n\n    // @param: val => string of the input\n    validateBtn = (val) => {\n        let btnDOM = document.querySelector(\".btn-search\");\n        val === '' || val.length > 4 ? btnDOM.disabled = true : btnDOM.disabled = false;\n    };\n\n    render(){\n        return (\n            <div className=\"card card-container search\">\n                <div className=\"card-body\">\n                    <h2 className=\"h6 mb-0\">searching...</h2>\n                    <input type=\"text\" \n                           className=\"form-control stock-code__value\" \n                           placeholder=\"Stock Code (e.g. AAPL)\" \n                           onKeyUp={ (e) => this.validateBtn(e.target.value) }>\n                    </input>\n                    <button className=\"btn btn-secondary w-100 btn-search\" onClick={ () => this.sendSearchResult(true, '') } disabled={ this.loading_api }>Search Results<FaSearch /></button>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default SearchCard;","import React from 'react';\nimport '../css/styles.css';\nimport '../css/FilterCard.css';\nimport stock from '../apis/stock';\nimport { FaChartBar } from 'react-icons/fa';\n\nclass FilterCard extends React.Component{\n\n    state = {\n        validator_start_date: '',\n        validator_end_date: ''\n    };\n\n    // @desc: componentDidUpate checks to see if the showFilterDOM is\n    //        triggered. This is triggered when the API call is done and\n    //        disables the button as default.\n    componentDidUpdate(){\n        if(this.props.showFilterDOM){\n            document.querySelector(\".btn-filter\").disabled = true;\n        };\n    };\n\n    // @desc: start_dateValidator checks for the date of the first date input.\n    //        It also checks for its current date and if the endDate is later\n    //        than the current Date and before the start date it disables the button.\n\n    // @params: val => the value of the date in string (e.g. 2020-05-03)\n    start_dateValidator = (val) => {\n        let current_date = new Date();\n\n        this.setState({\n            validator_start_date: val\n        }, () => {\n            if(Date.parse(this.state.validator_start_date) < Date.parse(this.state.validator_end_date) \n                && Date.parse(this.state.validator_start_date) < current_date\n                && Date.parse(this.state.validator_end_date) < current_date){\n                document.querySelector(\".btn-filter\").disabled = false;\n            }else{\n                document.querySelector(\".btn-filter\").disabled = true;\n            }\n        });\n    };\n\n    // @desc: end_dateValidator checks for the date of the second date input.\n    //        It also checks for its current date and if the startDate is later\n    //        than the current Date and after the start date it disables the button.\n\n    // @params: val => the value of the date in string (e.g. 2020-05-03)\n    end_dateValidator = (val) => {\n        let current_date = new Date();\n    \n        this.setState({\n            validator_end_date: val\n        }, () => {\n            if(Date.parse(this.state.validator_start_date) < Date.parse(this.state.validator_end_date) \n                && Date.parse(this.state.validator_end_date) < current_date){\n                document.querySelector(\".btn-filter\").disabled = false;\n            }else{\n                document.querySelector(\".btn-filter\").disabled = true;\n            };\n        });\n    };\n\n    // @desc: filterMyChart is a button trigger which checks for the start and end\n    //        date and the stock code value. This runs an API calls and sends it\n    //        back up as props in App.js, and also resets the start and end date.\n    filterMyChart = async () => {\n        let stockValue = document.querySelector(\".filter-select\").value;\n        let startDate = new Date(document.querySelector(\"input.start-date\").value)/1000;\n        let endDate = new Date(document.querySelector(\"input.end-date\").value)/1000;\n\n        const graph_response = await stock.get('/stock/candle', {\n            params: {\n              symbol: stockValue,\n              resolution: 5,\n              from: startDate,\n              to: endDate,\n              token: 'bqhq9i7rh5rbubolrqd0'\n            }\n        });\n\n        this.props.getFilteredData([startDate, endDate], {stockValue: stockValue, response: graph_response.data});\n        document.querySelector(\"input.start-date\").value = '';\n        document.querySelector(\"input.end-date\").value = '';\n    };\n\n    render(){\n        let optionSelectDOM = '';\n\n        // @dom: show all the stock values and put it into the select DOM\n        optionSelectDOM = this.props.showGraphData.map((graphData, index) => {\n            return (\n                <option \n                    value={ graphData.stockValue } \n                    key={ index }\n                    selected={ this.props.showGraphData[this.props.showGraphData.length - 1] === graphData ? \"selected\" : \"\" }>\n                        { graphData.stockValue }\n                </option>\n            )\n        });\n\n        return (\n            <div className=\"card card-container filter\">\n                <div className=\"card-body\">\n                    <h2 className=\"h6 mb-2\">filter</h2>\n                    { \n                        this.props.showFilterDOM \n                        ? \n                        <div>\n                            <select className=\"custom-select filter-select\">\n                                { optionSelectDOM }\n                            </select>\n                            <div className=\"d-flex filter-card-date mt-2\">\n                                <div className=\"filter-card-date-div\">\n                                    <label className=\"mb-0\">Start Date:</label>\n                                    <input className=\"form-control start-date\" type=\"date\" onChange={ (e) => this.start_dateValidator(e.target.value) }></input>\n                                </div>\n                                <div className=\"filter-card-date-div\">\n                                    <label className=\"mb-0\">End Date:</label>\n                                    <input className=\"form-control end-date\" type=\"date\" onChange={ (e) => this.end_dateValidator(e.target.value) }></input>\n                                </div>\n                            </div>\n                            <button className=\"btn btn-secondary w-100 mt-3 btn-filter\" onClick={ this.filterMyChart }>Filter<FaChartBar/></button>\n                        </div>\n                        : <p className=\"mb-0 no-filter-message\">waiting...</p>\n                    }\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default FilterCard;","import React from 'react';\nimport '../css/styles.css';\nimport '../css/TableDataCard.css';\n\nclass TableDataCard extends React.Component{\n\n    state = {\n        currency: '$'\n    }\n    \n    render(){\n        let tableDataDOM = '';\n\n        // @dom: show all values in the table\n        tableDataDOM = this.props.tableData.map((table, index) => {\n\n            // @condition: check if there is a viable response from the API call (e.g. AAAA doesn't exist)\n            if(table !== \"Symbol not supported\"){\n                return (\n                    <tr key={ index }>\n                        <th scope=\"row\">{ this.props.graphData[index].stockValue }</th>\n                        <td>{ JSON.stringify(new Date(table.t * 1000)).split('T')[0].replace('\"', '') }</td>\n    \n                        {/* Open Price */}\n                        <td className={\n                            this.state.currency + table.o.toFixed(2) > \n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold'}>{ this.state.currency + table.o.toFixed(2) }</td>\n                        \n                        {/* Low Price */}\n                        <td className={\n                            this.state.currency + table.l.toFixed(2) > \n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold'}>{ this.state.currency + table.l.toFixed(2) }</td>\n    \n                        {/* High Price */}\n                        <td className={\n                            this.state.currency + table.h.toFixed(2) > \n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold'}>{ this.state.currency + table.h.toFixed(2) }</td>\n    \n                        {/* Previous Close Price */}\n                        <td className={ \n                            this.state.currency + table.c.toFixed(2) <\n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold' }>{ this.state.currency + table.pc.toFixed(2) }</td>\n                        \n                        {/* Close Price */}\n                        <td className={ \n                            this.state.currency + table.c.toFixed(2) > \n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold' }>{ this.state.currency + table.c.toFixed(2) }</td>\n                        \n                        {/* PC/C percentage */}\n                        <td className={ \n                            this.state.currency + table.c.toFixed(2) >\n                            this.state.currency + table.pc.toFixed(2) ? \n                            'green-text font-weight-bold' : 'red-text font-weight-bold' }>{ (100 - (table.pc.toFixed(2)/table.c.toFixed(2))*100).toFixed(2) + '%' }</td>\n                    </tr>\n                );\n            };\n        });\n\n        return (\n            <div className=\"card card-container table-data\">\n                <div className=\"card-body\">\n                    <h2 className=\"h6 mb-3\">Latest available data:</h2>\n                    { \n                        this.props.showTableData \n                        ? \n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                <th scope=\"col\">Stock Code</th>\n                                <th scope=\"col\">Last Updated Data</th>\n                                <th scope=\"col\">Open Price</th>\n                                <th scope=\"col\">Low Price</th>\n                                <th scope=\"col\">High Price</th>\n                                <th scope=\"col\">Previous Close Price</th>\n                                <th scope=\"col\">Current Price</th>\n                                <th scope=\"col\">% From Yesterday</th>\n                                {/* <th scope=\"col\">股票代码</th>\n                                <th scope=\"col\">开盘价</th>\n                                <th scope=\"col\">最低价</th>\n                                <th scope=\"col\">最高价</th>\n                                <th scope=\"col\">收盘价</th>\n                                <th scope=\"col\">当前价</th> */}\n                                {/* <th scope=\"col\">% From Yesterday</th> */}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { tableDataDOM }\n                            </tbody>\n                        </table>\n                        :\n                        <p className=\"mb-0 no-data-message\">There are currently no available data. Please search stock code for more details.</p>\n                    }\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default TableDataCard;","import React from 'react';\nimport Chart from 'chart.js';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends React.Component{\n\n  chartRef = React.createRef();\n    \n  componentDidUpdate() {\n    \n    // @condition: check if there is a viable response from the API call\n    if(this.props.showGraphData){\n      \n      var lowOrHighColor = \n          this.props.graphData.y_axis[0] <\n          this.props.graphData.y_axis[this.props.graphData.y_axis.length - 1] \n          ? '#81b737' : '#d54f4f';\n\n      // loops through all the graphData array and makes a graph individually\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n              labels: this.props.graphData.x_axis,\n              datasets: [\n                  {\n                      data: this.props.graphData.y_axis,\n                      backgroundColor: \"rgba(0, 0, 0, 0)\",\n                      borderColor: lowOrHighColor\n                  }\n              ]\n          },\n          options: {\n            responsive: true,\n            tooltips: {\n              enabled: true,\n            },\n            tooltips: {\n                mode: 'point'\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                      display: false\n                    },\n                    gridLines: {\n                      display: true\n                    },\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\"\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                      display: true,\n                      stepSize: 5\n                    },  \n                    gridLines: {\n                      display: false,\n                    },\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\"\n                    }\n                }]\n            },\n            legend: {\n                display: false\n            },\n            elements: {\n              point:{\n                  radius: 0\n              }\n            }\n          }\n      });\n    }\n  };\n\n  convertToDate = (str) => {\n    let date = new Date(str),\n      mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n      day = (\"0\" + date.getDate()).slice(-2);\n    return [date.getFullYear(), mnth, day].join(\"-\");\n  };\n\n  render() {\n      return (\n          <div className=\"main__chart\" id={ 'myChart-' + this.props.graphData.stockValue }>\n            <div>\n                <h2 className=\"h5 mb-3 stockValue\">\n                  { this.props.graphData.stockValue }\n                  { \n                    this.props.graphData.date_data \n                    ? \n                    <div className=\"ml-2 d-inline\">\n                      <span>\n                      (\n                      { this.convertToDate(this.props.graphData.date_data.filteredStartDate) } \n                      &nbsp;to&nbsp;\n                      { this.convertToDate(this.props.graphData.date_data.filteredEndDate) }\n                      )\n                      </span> \n                    </div>\n                    : <div className=\"ml-2 d-inline\">(Last three days)</div> \n                  }\n                </h2>\n                <canvas \n                  className=\"myChart\"\n                  ref={this.chartRef}\n                /> \n            </div>\n          </div>\n      )\n  }\n};\n\nexport default GraphCard;","import React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n\nclass App extends React.Component{\n    \n    // TODO: load circle bar\n\n    state = {\n        tableData: [],\n        graphData: [],\n        activeStockValue: '',\n        showFilterDOM: false,\n        showFilterData: false,\n        showTableData: false,\n        showGraphData: false,\n        lsArray: [],\n        option: []\n    };\n\n    // @desc: this componentDidUpdate is showing the latest graph which has \n    //        been searched and hiding the rest\n    componentDidUpdate(){\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n            }\n        }); \n    };\n\n    // @desc: SearchCard.js does an API call and sends the relevant data for\n    //        the TableDataCard.js, through this you need to truesy the showFilterDOM,\n    //        and showTableData to show the user actual representable DOM.\n    // @param: data     => an object which has current, highest, lowest etc. values\n    //         response => {c: 289.07, h: 299, l: 285.85, o: 286.25, pc: 293.8, t: 1588487630}\n    sendSearchResult = (data) => {\n        if(data !== \"Symbol not supported\"){\n            this.setState({ \n                tableData: this.state.tableData.concat(data),\n                showFilterDOM: true,\n                showTableData: true\n            });\n        };\n    };\n\n    // @desc: FilterCard.js does an API call and sends the response_data which is the\n    //        stockValue and the actual response from the API. From this you want to \n    //        remove the old graph which was in the graphData and insert the new data.\n    //        This also adds readable date for the x_axis data.\n    // @params: date => start and end date of the filtered value\n    //          response_data => stockValue must be a string and response is an object\n    //          response      => {stockValue: stockValue, response: graph_response.data}\n    getFilteredData = (date, response_data) => {\n        let abc = this.state.graphData;\n        let converted_array = [];   \n        \n        for(let i = 0; i < abc.length; i++){\n            let obj = abc[i];\n\n            if(response_data.stockValue.indexOf(obj.stockValue) !== -1){\n                converted_array = [];\n                for(let i = 0; i < response_data.response.t.length; i++){\n                    converted_array.push(new Date(response_data.response.t[i] * 1000))\n                };\n                abc.splice(i, 1);\n                abc.push({\n                    stockValue: response_data.stockValue,\n                    x_axis: converted_array,\n                    y_axis: response_data.response.c,\n                    date_data: {\n                        filteredStartDate: new Date(date[0]*1000),\n                        filteredEndDate: new Date(date[1]*1000)\n                    }\n                });\n                this.setState({\n                    graphData: abc,\n                    activeStockValue: response_data.stockValue,\n                    showGraphData: true\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    })\n                });\n            };\n        };\n    };\n\n    // @desc: SearchCard.js does an API call and sends the graph_array which is the\n    //        stockValue and the actual response from the API. This changes the unix\n    //        time stamp to readable js time in the x_axis.\n    // @param: graph_array => stockValue must be a string and an object of response\n    //         response    => { stockValue: AAPL, response: {c: Array(179), h: Array(179) …} }\n    sendSearchGraphResult = (codeExist, graph_array) => {\n        if(codeExist != \"no_data\"){\n            let converted_array = [];\n        \n            this.setState({\n                lsArray: this.state.lsArray.concat(graph_array.stockValue)\n            }, () => {\n                localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n            });\n    \n            if(graph_array.response.s !== \"no_data\"){\n                for(let i = 0; i < graph_array.response.t.length; i++){\n                    converted_array.push(new Date(graph_array.response.t[i] * 1000))\n                };\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue,\n                        x_axis: converted_array,\n                        y_axis: graph_array.response.c,\n                    }),\n                    activeStockValue: graph_array.stockValue,\n                    showGraphData: true\n                }, () => {\n                    // this makes the second graph and above show\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }else{\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue, \n                        response: \"no_data\",\n                        showGraphData: true\n                    })\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }\n        }else{\n            alert(\"Stock Code does not exist within the Database.\");\n            window.location.reload(true);\n        };\n    };\n\n    // @desc: same as componentDidUpdate, hide all and display only that has been selected\n\n    // @param: stockValue => string of the select (e.g. AAPL)\n    checkStockCode = (stockValue) => {\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n            }\n        }); \n    }\n\n    render(){\n        let graphCardDOM = '';\n        let optionSelectDOM = '';\n\n        // @condition: check if showGraphData is true\n        if(this.state.showGraphData){\n            // loop through the data and make each graph\n            graphCardDOM = this.state.graphData.map((graphData, index) => {\n                if(graphData.response !== \"no_data\"){\n                    return (\n                        <GraphCard\n                            key = { index }\n                            tableData = { this.state.tableData }\n                            showGraphData = { this.state.showGraphData }\n                            showActiveStockCode = { this.state.activeStockValue }\n                            graphData = { graphData }\n                            filteredData = { this.state.filteredData }\n                            showFilterData = { this.state.showFilterData }>\n                        </GraphCard>\n                    );\n                }else{\n                    return(\n                        <p key={ index } \n                           className=\"no-graph-data-message\">\n                               wait for data\n                        </p>\n                    )\n                };\n            });\n        };\n  \n        // @dom: show all the stock value as a option in select\n        optionSelectDOM = this.state.graphData.map((graphData, index) => {\n            return (\n                <option \n                value={ graphData.stockValue } \n                key={ index }\n                selected={ this.state.graphData[this.state.graphData.length - 1] === graphData ? \"selected\" : \"\" }>\n                  { graphData.stockValue }\n                </option>\n            )\n        });\n\n        return (\n            <div className={ this.state.showGraphData ? \"container-fluid app-container\" : \"container-fluid app-container height-100\" }>\n                <div className=\"row app-container__row\">\n                    <div className=\"col-12 app-container__container\">\n                        <div className=\"app-container__left\">\n                            <SearchCard \n                                sendSearchResult = { this.sendSearchResult }\n                                sendSearchGraphResult = { this.sendSearchGraphResult }>\n                            </SearchCard>\n                            <FilterCard\n                                showFilterDOM = { this.state.showFilterDOM }\n                                showGraphData = { this.state.graphData }\n                                showActiveStockCode = { this.state.activeStockValue }\n                                getFilteredData = { this.getFilteredData }>\n                            </FilterCard>\n                        </div>\n                        <div className=\"app-container__right\">\n                            <div className=\"card card-container graph\">\n                                <div className=\"card-body\">\n                                    { \n                                        this.state.showGraphData \n                                        ? \n                                        // add the select field\n                                        <div>\n                                            <select className=\"custom-select main__chart-select\" onChange={ (e) => this.checkStockCode(e.target.value) }>\n                                                { optionSelectDOM }\n                                            </select>\n                                            { graphCardDOM }\n                                        </div>\n                                        : \n                                        <p className=\"no-graph-data-message\">\n                                            No current stock found. Please go to the first box and search for a stock.\n                                        </p> \n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row table-data-row\">\n                    <div className=\"col-12 table-data-col\">\n                        <TableDataCard \n                            showTableData = { this.state.showTableData }\n                            tableData = { this.state.tableData }\n                            graphData = { this.state.graphData }>\n                        </TableDataCard>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App/>,\n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}